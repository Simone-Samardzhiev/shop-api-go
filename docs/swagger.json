{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the Shop API server for e-shop.",
        "title": "Shop API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves user information with optional filters and pagination. Requires admin privileges and a valid JWT token in the Authorization header.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Users information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID (UUID)",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email address",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user role (e.g. 'admin', 'user')",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination (min=1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64-encoded timestamp cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of users to return (min=1)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "$ref": "#/definitions/response.FetchingUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Missing or invalid JWT token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions or invalid token type(expected access token)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/update/{id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an admin to update a user's information, including username, email, password, and role. Requires a valid admin JWT token.",
                "tags": [
                    "Admin"
                ],
                "summary": "Update user by admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID (UUID) to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update for the user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – invalid token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden – insufficient permissions or invalid token type(expected access token)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user using their username and password, returning a new pair of access and refresh tokens upon successful login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "Login credentials (username and password)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful — returns new access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/response.TokensResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or missing fields",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh-session": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refreshes the user's authentication session using a valid **refresh token** provided in the Authorization header. Returns a new access/refresh token pair.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer refresh token (format: Bearer \u003ctoken\u003e)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session refreshed successfully — returns new access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/response.TokensResponse"
                        }
                    },
                    "401": {
                        "description": "Missing, malformed, or invalid token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Invalid token type (expected refresh token)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/update": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a user's account. Requires current username and password for authentication. Optional fields include new username, new email, and new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user account",
                "parameters": [
                    {
                        "description": "Update account payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account updated successfully"
                    },
                    "400": {
                        "description": "Invalid request payload or missing fields",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Registers a new user in the system using email, username, and password. Returns HTTP 201 on success.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Invalid request payload or missing fields",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email or username already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.UserRole": {
            "type": "string",
            "enum": [
                "admin",
                "client",
                "delivery",
                "warehouse"
            ],
            "x-enum-varnames": [
                "Admin",
                "Client",
                "Delivery",
                "Warehouse"
            ]
        },
        "request.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "Secret_password123"
                },
                "username": {
                    "type": "string",
                    "example": "MyUsername"
                }
            }
        },
        "request.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "newUser@email.com"
                },
                "password": {
                    "type": "string",
                    "example": "NewSecret_123"
                },
                "username": {
                    "type": "string",
                    "example": "newUser123"
                }
            }
        },
        "request.UpdateAccountRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "newEmail": {
                    "type": "string",
                    "example": "newEmail@emai.com"
                },
                "newPassword": {
                    "type": "string",
                    "example": "NewSecret_123"
                },
                "newUsername": {
                    "type": "string",
                    "example": "newUsername123"
                },
                "password": {
                    "type": "string",
                    "example": "MyPassword_123"
                },
                "username": {
                    "type": "string",
                    "example": "MyUsername"
                }
            }
        },
        "request.UpdateUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/domain.UserRole"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "INTERNAL_SERVER_ERROR"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Server cannot process the request."
                    ]
                }
            }
        },
        "response.FetchingUsersResponse": {
            "type": "object",
            "properties": {
                "cursor": {
                    "type": "string",
                    "example": "MjAyNS0xMC0xNVQxMjo0MDoxOS41NTU4Mjda"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.user"
                    }
                }
            }
        },
        "response.TokensResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "response.user": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2025-10-15T12:37:42.664482Z"
                },
                "email": {
                    "type": "string",
                    "example": "viktor.stavchev@gmail.com"
                },
                "id": {
                    "type": "string",
                    "example": "1bd70616-480b-47b9-91f5-292b4f4a45b1"
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.UserRole"
                        }
                    ],
                    "example": "client"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2025-10-15T12:37:42.664482Z"
                },
                "username": {
                    "type": "string",
                    "example": "Viktor123"
                }
            }
        }
    }
}